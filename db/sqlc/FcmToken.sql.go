// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: FcmToken.sql

package db

import (
	"context"
)

const createFcmToken = `-- name: CreateFcmToken :one
INSERT INTO "FcmToken" (user_id,fcm_token,is_valid) VALUES ($1, $2, $3) RETURNING id, user_id, fcm_token, is_valid, created_at
`

type CreateFcmTokenParams struct {
	UserID   int32  `json:"user_id"`
	FcmToken string `json:"fcm_token"`
	IsValid  int32  `json:"is_valid"`
}

func (q *Queries) CreateFcmToken(ctx context.Context, arg CreateFcmTokenParams) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, createFcmToken, arg.UserID, arg.FcmToken, arg.IsValid)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFcmToken = `-- name: DeleteFcmToken :one
DELETE FROM "FcmToken" WHERE
id=$1 RETURNING id, user_id, fcm_token, is_valid, created_at
`

func (q *Queries) DeleteFcmToken(ctx context.Context, id int32) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, deleteFcmToken, id)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const getFcmTokenById = `-- name: GetFcmTokenById :one
SELECT id, user_id, fcm_token, is_valid, created_at FROM "FcmToken" WHERE id = $1
`

func (q *Queries) GetFcmTokenById(ctx context.Context, id int32) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, getFcmTokenById, id)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const getFcmTokenUserId = `-- name: GetFcmTokenUserId :one
SELECT id, user_id, fcm_token, is_valid, created_at FROM "FcmToken" WHERE user_id = $1 and is_valid = 1
`

func (q *Queries) GetFcmTokenUserId(ctx context.Context, userID int32) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, getFcmTokenUserId, userID)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const updateFcmToken = `-- name: UpdateFcmToken :one
UPDATE "FcmToken" 
SET fcm_token = $2, 
is_valid=$3
WHERE id = $1
RETURNING id, user_id, fcm_token, is_valid, created_at
`

type UpdateFcmTokenParams struct {
	ID       int32  `json:"id"`
	FcmToken string `json:"fcm_token"`
	IsValid  int32  `json:"is_valid"`
}

func (q *Queries) UpdateFcmToken(ctx context.Context, arg UpdateFcmTokenParams) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, updateFcmToken, arg.ID, arg.FcmToken, arg.IsValid)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}
