// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: JwtToken.sql

package db

import (
	"context"
	"time"
)

const createJwtToken = `-- name: CreateJwtToken :one
INSERT INTO "Token" (user_id,jwt_token,created_at,expires_at) VALUES ($1, $2, $3,$4) RETURNING id, user_id, jwt_token, expires_at, created_at
`

type CreateJwtTokenParams struct {
	UserID    int32     `json:"user_id"`
	JwtToken  string    `json:"jwt_token"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateJwtToken(ctx context.Context, arg CreateJwtTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createJwtToken,
		arg.UserID,
		arg.JwtToken,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJWTokenByUserId = `-- name: DeleteJWTokenByUserId :many
DELETE FROM "Token" WHERE user_id = $1
RETURNING id, user_id, jwt_token, expires_at, created_at
`

func (q *Queries) DeleteJWTokenByUserId(ctx context.Context, userID int32) ([]Token, error) {
	rows, err := q.db.QueryContext(ctx, deleteJWTokenByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Token{}
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.JwtToken,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteJwtToken = `-- name: DeleteJwtToken :one
DELETE FROM "Token" WHERE
id=$1 RETURNING id, user_id, jwt_token, expires_at, created_at
`

func (q *Queries) DeleteJwtToken(ctx context.Context, id int32) (Token, error) {
	row := q.db.QueryRowContext(ctx, deleteJwtToken, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getJwtTokenById = `-- name: GetJwtTokenById :one
SELECT id, user_id, jwt_token, expires_at, created_at FROM "Token" WHERE id = $1
`

func (q *Queries) GetJwtTokenById(ctx context.Context, id int32) (Token, error) {
	row := q.db.QueryRowContext(ctx, getJwtTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getJwtTokenUserId = `-- name: GetJwtTokenUserId :one
SELECT id, user_id, jwt_token, expires_at, created_at FROM "Token" WHERE jwt_token ILIKE $2 and user_id = $1
`

type GetJwtTokenUserIdParams struct {
	UserID   int32  `json:"user_id"`
	JwtToken string `json:"jwt_token"`
}

func (q *Queries) GetJwtTokenUserId(ctx context.Context, arg GetJwtTokenUserIdParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getJwtTokenUserId, arg.UserID, arg.JwtToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateJwtToken = `-- name: UpdateJwtToken :one
UPDATE "Token" 
SET expires_at=now()
WHERE jwt_token ILIKE $1 and user_id = $2
RETURNING id, user_id, jwt_token, expires_at, created_at
`

type UpdateJwtTokenParams struct {
	JwtToken string `json:"jwt_token"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateJwtToken(ctx context.Context, arg UpdateJwtTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateJwtToken, arg.JwtToken, arg.UserID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
