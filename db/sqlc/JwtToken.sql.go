// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: JwtToken.sql

package db

import (
	"context"
)

const createJwtToken = `-- name: CreateJwtToken :one
INSERT INTO "Token" (user_id,jwt_token,is_valid) VALUES ($1, $2, $3) RETURNING id, user_id, jwt_token, is_valid, created_at
`

type CreateJwtTokenParams struct {
	UserID   int32  `json:"user_id"`
	JwtToken string `json:"jwt_token"`
	IsValid  int32  `json:"is_valid"`
}

func (q *Queries) CreateJwtToken(ctx context.Context, arg CreateJwtTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createJwtToken, arg.UserID, arg.JwtToken, arg.IsValid)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteJwtToken = `-- name: DeleteJwtToken :one
DELETE FROM "Token" WHERE
id=$1 RETURNING id, user_id, jwt_token, is_valid, created_at
`

func (q *Queries) DeleteJwtToken(ctx context.Context, id int32) (Token, error) {
	row := q.db.QueryRowContext(ctx, deleteJwtToken, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const getJwtTokenById = `-- name: GetJwtTokenById :one
SELECT id, user_id, jwt_token, is_valid, created_at FROM "Token" WHERE id = $1
`

func (q *Queries) GetJwtTokenById(ctx context.Context, id int32) (Token, error) {
	row := q.db.QueryRowContext(ctx, getJwtTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const getJwtTokenUserId = `-- name: GetJwtTokenUserId :one
SELECT id, user_id, jwt_token, is_valid, created_at FROM "Token" WHERE jwt_token ILIKE $2 and user_id = $1
`

type GetJwtTokenUserIdParams struct {
	UserID   int32  `json:"user_id"`
	JwtToken string `json:"jwt_token"`
}

func (q *Queries) GetJwtTokenUserId(ctx context.Context, arg GetJwtTokenUserIdParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getJwtTokenUserId, arg.UserID, arg.JwtToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}

const updateJwtToken = `-- name: UpdateJwtToken :one
UPDATE "Token" 
SET jwt_token = $2, 
is_valid=$3
WHERE id = $1
RETURNING id, user_id, jwt_token, is_valid, created_at
`

type UpdateJwtTokenParams struct {
	ID       int32  `json:"id"`
	JwtToken string `json:"jwt_token"`
	IsValid  int32  `json:"is_valid"`
}

func (q *Queries) UpdateJwtToken(ctx context.Context, arg UpdateJwtTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateJwtToken, arg.ID, arg.JwtToken, arg.IsValid)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.JwtToken,
		&i.IsValid,
		&i.CreatedAt,
	)
	return i, err
}
