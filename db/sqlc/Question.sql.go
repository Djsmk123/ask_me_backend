// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: Question.sql

package db

import (
	"context"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO "Question" (user_id, content) VALUES ($1, $2) RETURNING id, user_id, content, created_at, updated_at
`

type CreateQuestionParams struct {
	UserID  int32  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.UserID, arg.Content)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestionByID = `-- name: GetQuestionByID :one
SELECT id, user_id, content, created_at, updated_at FROM "Question" WHERE id = $1
`

func (q *Queries) GetQuestionByID(ctx context.Context, id int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionByID, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestionForUpdate = `-- name: GetQuestionForUpdate :one
SELECT id, user_id, content, created_at, updated_at FROM "Question" WHERE id = $1 LIMIT 1 For No Key Update
`

func (q *Queries) GetQuestionForUpdate(ctx context.Context, id int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionForUpdate, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestionsByUserID = `-- name: GetQuestionsByUserID :many
SELECT id, user_id, content, created_at, updated_at FROM "Question" WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type GetQuestionsByUserIDParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetQuestionsByUserID(ctx context.Context, arg GetQuestionsByUserIDParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getQuestionsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const questionDelete = `-- name: QuestionDelete :exec
DELETE FROM "Question"
WHERE id = $1
`

func (q *Queries) QuestionDelete(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, questionDelete, id)
	return err
}

const updateQuestionById = `-- name: UpdateQuestionById :one
Update "Question"
Set content=$3 WHERE id = $1 and user_id= $2
RETURNING id, user_id, content, created_at, updated_at
`

type UpdateQuestionByIdParams struct {
	ID      int32  `json:"id"`
	UserID  int32  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) UpdateQuestionById(ctx context.Context, arg UpdateQuestionByIdParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestionById, arg.ID, arg.UserID, arg.Content)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
