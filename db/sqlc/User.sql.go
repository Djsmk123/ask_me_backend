// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: User.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (username, email, password_hash,public_profile_image,private_profile_image,provider) VALUES ($1, $2, $3,$4,$5,$6) RETURNING id, username, email, provider, password_hash, public_profile_image, private_profile_image, created_at, updated_at
`

type CreateUserParams struct {
	Username            string         `json:"username"`
	Email               string         `json:"email"`
	PasswordHash        sql.NullString `json:"password_hash"`
	PublicProfileImage  string         `json:"public_profile_image"`
	PrivateProfileImage string         `json:"private_profile_image"`
	Provider            string         `json:"provider"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.PublicProfileImage,
		arg.PrivateProfileImage,
		arg.Provider,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.PasswordHash,
		&i.PublicProfileImage,
		&i.PrivateProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :one
DELETE FROM "User" WHERE
id=$1 RETURNING id, username, email, provider, password_hash, public_profile_image, private_profile_image, created_at, updated_at
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.PasswordHash,
		&i.PublicProfileImage,
		&i.PrivateProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, provider, password_hash, public_profile_image, private_profile_image, created_at, updated_at FROM "User" WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.PasswordHash,
		&i.PublicProfileImage,
		&i.PrivateProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, provider, password_hash, public_profile_image, private_profile_image, created_at, updated_at FROM "User" WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.PasswordHash,
		&i.PublicProfileImage,
		&i.PrivateProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE "User"
SET password_hash = $2, updated_at = now()
WHERE id = $1
RETURNING id, username, email, provider, password_hash, public_profile_image, private_profile_image, created_at, updated_at
`

type UpdateUserPasswordParams struct {
	ID           int32          `json:"id"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Provider,
		&i.PasswordHash,
		&i.PublicProfileImage,
		&i.PrivateProfileImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
